# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import faulthandler
from PyQt5 import QtGui, QtWidgets, QtCore
from PyQt5.QtCore import QCoreApplication, QThread
from PyQt5.QtWidgets import QFileDialog
from sys import argv, exit
from os import getcwd, startfile
from os.path import exists, join, dirname
from win10toast import ToastNotifier
import webbrowser
from yt_dlp import YoutubeDL
import json

toast = ToastNotifier()

"""SETTINGS"""
FOLDER_TO_SAVE = getcwd()

CREATE_FILE: bool = False
CLOSE_APP: bool = False
OPEN_FOLDER: bool = False
MAX_RESOLUTION: bool = False
NOTIFICATIONS: bool = False
SAVE_FOLDER: list = ["", ""]
LANGUAGE: int = 0
FILE_TYPE: int = 0
RESOLUTION: int = 2

SETTINGS_FILE_NAME: str = "settings.json"
DEFAULT_SETTINGS: dict = {
    "CREATE_FILE": "True",
    "CLOSE_APP": "",
    "OPEN_FOLDER": "True",
    "MAX_RESOLUTION": "True",
    "NOTIFICATIONS": "True",
    "SAVE_FOLDER": [
        "",
        ""
    ],
    "LANGUAGE": 0,
    "FILE_TYPE": 0,
    "RESOLUTION": 2,
}

# OTHER

_FORMATS: list = []
_URL: str = ""
_FILE_SIZE: int = 0
_RESOLUTION: str = ""
_VIDEO_FORMAT: str = ""

dict_res_2: dict = {
    '2160': '3840x2160',
    '1440': '2560x1440',
    '1080': '1920x1080',
    '720': '1280x720',
    '480': '854x480',
    '360': '640x360',
    '240': '426x240',
    '144': '256x144',

    0: '2160',
    1: '1440',
    2: '1080',
    3: '720',
    4: '480',
    5: '360',
    6: '240',
    7: '144',
}


def load_file(file_name: str) -> str:
    return join(dirname(__file__), file_name).replace('\\', '/')


def set_download_button_font_size(font_size: int) -> str:
    return f"QPushButton {{background-color: rgb(13, 99, 165); color: rgb(255, 255, 255); font: 63 {font_size}pt 'Yu Gothic UI Semibold'; border-radius: 10%; }} QPushButton:hover {{background-color: rgb(16, 129, 214); }} QPushButton:pressed {{background-color: rgb(9, 74, 124); }} "


class SearchThread(QThread):
    pushbutton_text = QtCore.pyqtSignal(str)
    label2_text = QtCore.pyqtSignal(str)
    label3_text = QtCore.pyqtSignal(str)

    def __init__(self, parent=None) -> None:
        super().__init__(parent)

    def run(self) -> None:
        faulthandler.enable()
        global _FORMATS, _FILE_SIZE, _URL, _RESOLUTION, _VIDEO_FORMAT

        _FORMATS.clear()

        try:
            ydl_opts_info = {
                'outtmpl': FOLDER_TO_SAVE + '/%(title)s.%(ext)s',
                'format': f"bv*[height<={_RESOLUTION}][ext={_VIDEO_FORMAT}]+ba[ext=m4a]/b[height<={_RESOLUTION}][ext={_VIDEO_FORMAT}] / bv*+ba/b",
                'listformats': True,
            }

            ydl_opts_info_auto = {
                'outtmpl': FOLDER_TO_SAVE + '/%(title)s.%(ext)s',
                'format': f"bv*[height<={_RESOLUTION}]+ba[ext=m4a]/b[height<={_RESOLUTION}] / bv*+ba/b",
                'listformats': True,
            }

            ydl_opts_info_maxres = {
                'outtmpl': FOLDER_TO_SAVE + '/%(title)s.%(ext)s',
                'format': f"bv*[ext={_VIDEO_FORMAT}]+ba[ext=m4a]/b[ext={_VIDEO_FORMAT}] / bv*+ba/b",
                'listformats': True,
            }

            ydl_opts_info_maxres_auto = {
                'outtmpl': FOLDER_TO_SAVE + '/%(title)s.%(ext)s',
                'format': f"bv*[height=best]+ba[ext=m4a]/b[height=best] / bv*+ba/b",
                'listformats': True,
            }

            if FILE_TYPE == 0:
                if MAX_RESOLUTION is True:
                    with YoutubeDL(ydl_opts_info_maxres_auto) as ydl:
                        info = ydl.extract_info(_URL, download=False)

                else:
                    with YoutubeDL(ydl_opts_info_auto) as ydl:
                        info = ydl.extract_info(_URL, download=False)

            else:
                if MAX_RESOLUTION is True:
                    with YoutubeDL(ydl_opts_info_maxres) as ydl:
                        info = ydl.extract_info(_URL, download=False)

                else:
                    with YoutubeDL(ydl_opts_info) as ydl:
                        info = ydl.extract_info(_URL, download=False)

            for f in info['formats']:
                if FILE_TYPE == 0:
                    if MAX_RESOLUTION is True:
                        if f['format_note'] in ['144p', '144p60', '144p50', '144p30',
                                                '240p', '240p60', '240p50', '240p30',
                                                '360p', '360p60', '360p50', '360p30',
                                                '480p', '480p60', '480p50', '480p30',
                                                '720p', '720p60', '720p50', '720p30',
                                                '1080p', '1080p60', '1080p50', '1080p30',
                                                '1440p', '1440p60', '1440p50', '1440p30',
                                                '2160p', '2160p60', '2160p50', '2160p30'] and (
                                f['ext'] == _VIDEO_FORMAT[0] or f['ext'] == _VIDEO_FORMAT[1]):
                            if type(f['filesize']) == int:
                                _FORMATS.append([f['format_note'], f['ext'], f['filesize']])

                    else:
                        if f['format_note'] in [f'{_RESOLUTION}p',
                                                f'{_RESOLUTION}p60',
                                                f'{_RESOLUTION}p50',
                                                f'{_RESOLUTION}p30'] and (
                                f['ext'] == _VIDEO_FORMAT[0] or f['ext'] == _VIDEO_FORMAT[1]):
                            if type(f['filesize']) == int:
                                _FORMATS.append([f['format_note'], f['ext'], f['filesize']])
                else:
                    if MAX_RESOLUTION is True:
                        if f['format_note'] in ['144p', '144p60', '144p50', '144p30',
                                                '240p', '240p60', '240p50', '240p30',
                                                '360p', '360p60', '360p50', '360p30',
                                                '480p', '480p60', '480p50', '480p30',
                                                '720p', '720p60', '720p50', '720p30',
                                                '1080p', '1080p60', '1080p50', '1080p30',
                                                '1440p', '1440p60', '1440p50', '1440p30',
                                                '2160p', '2160p60', '2160p50', '2160p30'] and f['ext'] == _VIDEO_FORMAT:
                            if type(f['filesize']) == int:
                                _FORMATS.append([f['format_note'], f['ext'], f['filesize']])

                    else:
                        if f['format_note'] in [f'{_RESOLUTION}p',
                                                f'{_RESOLUTION}p60',
                                                f'{_RESOLUTION}p50',
                                                f'{_RESOLUTION}p30'] and f['ext'] == _VIDEO_FORMAT:
                            if type(f['filesize']) == int:
                                _FORMATS.append([f['format_note'], f['ext'], f['filesize']])

        except Exception as e:
            print(e)

        print(_FORMATS)
        if len(_FORMATS) > 0:
            max_list = max(_FORMATS, key=lambda i: i[2])
            _FILE_SIZE = max_list[2] / 1024 / 1024

            self.label2_text.emit(info['title'])
            self.label3_text.emit(
                f"{max_list[0]} | {round(_FILE_SIZE, 2)} MB | {max_list[1]}\n")

            match LANGUAGE:
                case 0:
                    self.pushbutton_text.emit("Search")

                case 1:
                    self.pushbutton_text.emit("Поиск")

        else:
            self.pushbutton_text.emit("Search")
            self.label2_text.emit("Video not found")
            self.label3_text.emit("Video not found")


class DownloadThread(QThread):
    progress = QtCore.pyqtSignal(int)
    str_progress = QtCore.pyqtSignal(str)

    def __init__(self, parent=None) -> None:
        super().__init__(parent)

    def my_hook(self, d) -> None:
        if d['status'] == 'downloading':
            self.__cleen_percent(dl=d)
        elif d['status'] == 'finished':
            self.progress.emit(0)
            match LANGUAGE:
                case 0:
                    self.str_progress.emit("Download")
                case 1:
                    self.str_progress.emit("Скачать")

    def __cleen_percent(self, dl) -> None:
        network_speed = dl['_speed_str']
        percent = dl['_percent_str']
        all_mb = round(dl['total_bytes_estimate'] / 1024 / 1024, 2)
        downloaded_mb = round(dl['downloaded_bytes'] / 1024 / 1024, 2)
        eta = dl['eta']

        for i, char in enumerate(percent):
            if char == '%':
                value = percent[i - 5:i + 1].replace('%', '')
                value = (float(value.replace(' ', '')))
                self.progress.emit(int(value))
                self.str_progress.emit(f'{network_speed} | {downloaded_mb} MB / {all_mb} MB | eta: {eta} secs')
                break

    # YOUTUBE THREADS

    def run(self) -> None:
        try:
            print(_RESOLUTION, _VIDEO_FORMAT)
            ydl_opts_download = {
                'outtmpl': FOLDER_TO_SAVE + '/%(title)s.%(ext)s',
                'format': f"bv*[height<={_RESOLUTION}][ext={_VIDEO_FORMAT}]+ba[ext=m4a]/b[height<={_RESOLUTION}][ext={_VIDEO_FORMAT}] / bv*+ba/b",
                'progress_hooks': [self.my_hook],
            }

            ydl_opts_download_auto = {
                'outtmpl': FOLDER_TO_SAVE + '/%(title)s.%(ext)s',
                'format': f"bv*[height<={_RESOLUTION}]+ba[ext=m4a]/b[height<={_RESOLUTION}] / bv*+ba/b",
                'progress_hooks': [self.my_hook],
            }

            ydl_opts_download_maxres = {
                'outtmpl': FOLDER_TO_SAVE + '/%(title)s.%(ext)s',
                'format': f"bv*[ext={_VIDEO_FORMAT}]+ba[ext=m4a]/b[ext={_VIDEO_FORMAT}] / bv*+ba/b",
                'progress_hooks': [self.my_hook],
            }

            ydl_opts_download_maxres_auto = {
                'outtmpl': FOLDER_TO_SAVE + '/%(title)s.%(ext)s',
                'format': f"bv*+ba[ext=m4a]/b / bv*+ba/b",
                'progress_hooks': [self.my_hook],
            }

            if FILE_TYPE == 0:
                if MAX_RESOLUTION is True:
                    with YoutubeDL(ydl_opts_download_maxres_auto) as ydl:
                        ydl.download([_URL])
                else:
                    with YoutubeDL(ydl_opts_download_auto) as ydl:
                        ydl.download([_URL])
            else:
                if MAX_RESOLUTION is True:
                    with YoutubeDL(ydl_opts_download_maxres) as ydl:
                        ydl.download([_URL])

                else:
                    with YoutubeDL(ydl_opts_download) as ydl:
                        ydl.download([_URL])

            if OPEN_FOLDER is True:
                startfile(FOLDER_TO_SAVE)
            if NOTIFICATIONS is True:
                match LANGUAGE:
                    case 0:
                        toast.show_toast(
                            "Youtube Downloader",
                            "Video downloaded",
                            duration=5,
                            threaded=True,
                            icon_path=load_file("icons/youtube-downloader-icon.ico"),
                        )
                    case 1:
                        toast.show_toast(
                            "Youtube Downloader",
                            "Видео скачано",
                            duration=5,
                            threaded=True,
                            icon_path=load_file("icons/youtube-downloader-icon.ico"),
                        )

            if CLOSE_APP is True:
                QCoreApplication.quit()

        except Exception as e:
            print(e)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(595, 427)
        MainWindow.setStyleSheet("\n"
                                 "background-color: rgb(0, 31, 63);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(-10, -20, 611, 451))
        self.tabWidget.setStyleSheet("QTabBar::tab { \n"
                                     "     min-width: 0px; \n"
                                     "     max-width: 0px; \n"
                                     "     padding: 0px; \n"
                                     "     margin: 0px; \n"
                                     " }")
        self.tabWidget.setObjectName("tabWidget")
        self.TAB_MAIN = QtWidgets.QWidget()
        self.TAB_MAIN.setEnabled(True)
        self.TAB_MAIN.setObjectName("TAB_MAIN")
        self.LINEEDIT_LINK = QtWidgets.QLineEdit(self.TAB_MAIN)
        self.LINEEDIT_LINK.setPlaceholderText("Insert the link")
        self.LINEEDIT_LINK.setGeometry(QtCore.QRect(30, 70, 411, 41))
        self.LINEEDIT_LINK.setStyleSheet("QLineEdit {\n"
                                         "    background-color: rgb(8, 53, 88);\n"
                                         "    font: 57 16pt \"Yu Gothic Medium\";\n"
                                         "    color: rgb(255, 255, 255);\n"
                                         "    border-color: rgb(255, 255, 255);\n"
                                         "    border-radius: 15%;\n"
                                         "    padding-left: 10px;\n"
                                         "}\n"
                                         "\n"
                                         "QLineEdit:focus {\n"
                                         "    border: 2px solid rgb(13, 99, 165);\n"
                                         "}\n"
                                         "\n"
                                         "QLineEdit:hover {\n"
                                         "    border: 0.5px solid rgb(11, 76, 125);\n"
                                         "    background-color: rgb(9, 65, 108);\n"
                                         "}\n"
                                         "\n"
                                         "")
        self.LINEEDIT_LINK.setObjectName("LINEEDIT_LINK")
        self.PUSHBUTTON_SET_FOLDER_PATH_MAIN = QtWidgets.QPushButton(self.TAB_MAIN)
        self.PUSHBUTTON_SET_FOLDER_PATH_MAIN.setGeometry(QtCore.QRect(30, 370, 41, 41))
        self.PUSHBUTTON_SET_FOLDER_PATH_MAIN.setStyleSheet("QPushButton {\n"
                                                           "    background-color: rgb(8, 64, 107);\n"
                                                           "    color: rgb(255, 255, 255);\n"
                                                           "    font: 63 16pt \"Yu Gothic UI Semibold\";\n"
                                                           "    border-radius: 10%;\n"
                                                           f"    image: url({load_file('icons/folder.png')});\n"
                                                           "}\n"
                                                           "\n"
                                                           "QPushButton:hover {\n"
                                                           "    \n"
                                                           f"    image: url({load_file('icons/folder.png')});\n"
                                                           "    background-color: rgb(10, 81, 136);\n"
                                                           "}\n"
                                                           "\n"
                                                           "QPushButton:pressed {\n"
                                                           f"    image: url({load_file('icons/open-folder.png')});\n"
                                                           "    background-color: rgb(6, 49, 83);\n"
                                                           "}\n"
                                                           "\n"
                                                           "")
        self.PUSHBUTTON_SET_FOLDER_PATH_MAIN.setText("")
        self.PUSHBUTTON_SET_FOLDER_PATH_MAIN.setIconSize(QtCore.QSize(32, 32))
        self.PUSHBUTTON_SET_FOLDER_PATH_MAIN.setObjectName("PUSHBUTTON_SET_FOLDER_PATH_MAIN")
        self.PUSHBUTTON_SEARCH = QtWidgets.QPushButton(self.TAB_MAIN)
        self.PUSHBUTTON_SEARCH.setGeometry(QtCore.QRect(460, 70, 121, 41))
        self.PUSHBUTTON_SEARCH.setStyleSheet("QPushButton {\n"
                                             "    background-color: rgb(13, 99, 165);\n"
                                             "    color: rgb(255, 255, 255);\n"
                                             "    font: 63 16pt \"Yu Gothic UI Semibold\";\n"
                                             "    border-radius: 10%;\n"
                                             "}\n"
                                             "\n"
                                             "QPushButton:hover {\n"
                                             "    background-color: rgb(16, 129, 214);\n"
                                             "}\n"
                                             "\n"
                                             "QPushButton:pressed {\n"
                                             "    background-color: rgb(9, 74, 124);\n"
                                             "}")
        self.PUSHBUTTON_SEARCH.setObjectName("PUSHBUTTON_SEARCH")
        self.PUSHBUTTON_DOWNLOAD = QtWidgets.QPushButton(self.TAB_MAIN)
        self.PUSHBUTTON_DOWNLOAD.setGeometry(QtCore.QRect(80, 370, 451, 41))
        self.PUSHBUTTON_DOWNLOAD.setStyleSheet("QPushButton {\n"
                                               "    background-color: rgb(13, 99, 165);\n"
                                               "    color: rgb(255, 255, 255);\n"
                                               "    font: 63 16pt \"Yu Gothic UI Semibold\";\n"
                                               "    border-radius: 10%;\n"
                                               "}\n"
                                               "\n"
                                               "QPushButton:hover {\n"
                                               "    background-color: rgb(16, 129, 214);\n"
                                               "}\n"
                                               "\n"
                                               "\n"
                                               "QPushButton:pressed {\n"
                                               "    background-color: rgb(9, 74, 124);\n"
                                               "}")
        self.PUSHBUTTON_DOWNLOAD.setObjectName("PUSHBUTTON_DOWNLOAD")
        self.PUSHBUTTON_SETTINGS = QtWidgets.QPushButton(self.TAB_MAIN)
        self.PUSHBUTTON_SETTINGS.setGeometry(QtCore.QRect(540, 370, 41, 41))
        self.PUSHBUTTON_SETTINGS.setStyleSheet("QPushButton {\n"
                                               "    background-color: rgb(8, 64, 107);\n"
                                               "    color: rgb(255, 255, 255);\n"
                                               "    font: 63 16pt \"Yu Gothic UI Semibold\";\n"
                                               "    border-radius: 10%;\n"
                                               f"    image: url({load_file('icons/cogwheel.png')});\n"
                                               "}\n"
                                               "\n"
                                               "QPushButton:hover {\n"
                                               "    background-color: rgb(10, 81, 136);\n"
                                               "}\n"
                                               "\n"
                                               "QPushButton:pressed {\n"
                                               "    background-color: rgb(6, 49, 83);\n"
                                               "}")
        self.PUSHBUTTON_SETTINGS.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("cogwheel.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.PUSHBUTTON_SETTINGS.setIcon(icon)
        self.PUSHBUTTON_SETTINGS.setIconSize(QtCore.QSize(32, 32))
        self.PUSHBUTTON_SETTINGS.setObjectName("PUSHBUTTON_SETTINGS")
        self.LABEL_YOUTUBE_LOGO = QtWidgets.QLabel(self.TAB_MAIN)
        self.LABEL_YOUTUBE_LOGO.setGeometry(QtCore.QRect(100, 0, 231, 71))
        self.LABEL_YOUTUBE_LOGO.setStyleSheet("background-color: transparent;\n"
                                              f"image: url({load_file('icons/youtube-logo-white-text.png')});")
        self.LABEL_YOUTUBE_LOGO.setText("")
        self.LABEL_YOUTUBE_LOGO.setObjectName("LABEL_YOUTUBE_LOGO")
        self.LABEL_DOWNLOADER = QtWidgets.QLabel(self.TAB_MAIN)
        self.LABEL_DOWNLOADER.setGeometry(QtCore.QRect(280, 10, 181, 41))
        self.LABEL_DOWNLOADER.setStyleSheet("background-color: transparent;\n"
                                            "color: rgb(255, 255, 255);\n"
                                            "font: 63 24pt \"Segoe UI Semibold\";\n"
                                            "padding-top: 5px;")
        self.LABEL_DOWNLOADER.setAlignment(QtCore.Qt.AlignCenter)
        self.LABEL_DOWNLOADER.setObjectName("LABEL_DOWNLOADER")
        self.PUSHBUTTON_GITHUB = QtWidgets.QPushButton(self.TAB_MAIN)
        self.PUSHBUTTON_GITHUB.setGeometry(QtCore.QRect(20, 20, 21, 21))
        self.PUSHBUTTON_GITHUB.setStyleSheet("QPushButton {\n"
                                             "    background-color: transparent;\n"
                                             f"    image: url({load_file('icons/github_logo_white.png')});    \n"
                                             "    border-radius: 5%;\n"
                                             "    \n"
                                             "}\n"
                                             "\n"
                                             "QPushButton:hover {\n"
                                             "    background-color: rgb(0, 52, 104);\n"
                                             "}\n"
                                             "\n"
                                             "QPushButton:pressed {\n"
                                             "    \n"
                                             "    background-color: rgb(0, 23, 47);\n"
                                             "}")
        self.PUSHBUTTON_GITHUB.setText("")
        self.PUSHBUTTON_GITHUB.setObjectName("PUSHBUTTON_GITHUB")
        self.FRAME_VIDEO_INFO = QtWidgets.QFrame(self.TAB_MAIN)
        self.FRAME_VIDEO_INFO.setGeometry(QtCore.QRect(30, 130, 551, 221))
        self.FRAME_VIDEO_INFO.setStyleSheet("QFrame {\n"
                                            "    border-radius: 25%;\n"
                                            "    background-color: rgb(8, 57, 95);\n"
                                            "\n"
                                            "}")
        self.FRAME_VIDEO_INFO.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.FRAME_VIDEO_INFO.setFrameShadow(QtWidgets.QFrame.Raised)
        self.FRAME_VIDEO_INFO.setObjectName("FRAME_VIDEO_INFO")
        self.PROGRESSBAR = QtWidgets.QProgressBar(self.FRAME_VIDEO_INFO)
        self.PROGRESSBAR.setGeometry(QtCore.QRect(0, 200, 551, 20))
        self.PROGRESSBAR.setStyleSheet("QProgressBar {\n"
                                       "    \n"
                                       "    background-color: rgb(8, 57, 95);\n"
                                       "    border-radius: 5%;\n"
                                       "    \n"
                                       "}\n"
                                       "\n"
                                       "QProgressBar::chunk {\n"
                                       "    padding-left: 10px;\n"
                                       "    border-radius: 5%;\n"
                                       "    background-color: rgb(6, 216, 41);\n"
                                       "    text-align: center;\n"
                                       "    font: 0px;\n"
                                       "}")
        self.PROGRESSBAR.setProperty("value", 24)
        self.PROGRESSBAR.setObjectName("PROGRESSBAR")
        self.LABEL_TITLE = QtWidgets.QLabel(self.FRAME_VIDEO_INFO)
        self.LABEL_TITLE.setGeometry(QtCore.QRect(70, 10, 121, 31))
        self.LABEL_TITLE.setStyleSheet("QLabel {\n"
                                       "    font: 63 18pt \"Segoe UI Semibold\";\n"
                                       "    background-color: transparent;\n"
                                       "    \n"
                                       "    color: rgb(244, 244, 244);\n"
                                       "}")
        self.LABEL_TITLE.setAlignment(QtCore.Qt.AlignCenter)
        self.LABEL_TITLE.setObjectName("LABEL_TITLE")
        self.label_ = QtWidgets.QLabel(self.FRAME_VIDEO_INFO)
        self.label_.setGeometry(QtCore.QRect(265, 30, 21, 141))
        self.label_.setStyleSheet("background-color: transparent;")
        self.label_.setAlignment(QtCore.Qt.AlignCenter)
        self.label_.setObjectName("label_")
        self.label_2 = QtWidgets.QLabel(self.FRAME_VIDEO_INFO)
        self.label_2.setGeometry(QtCore.QRect(260, 20, 31, 141))
        self.label_2.setStyleSheet("background-color: transparent;")
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.LABEL_TITLE_2 = QtWidgets.QLabel(self.FRAME_VIDEO_INFO)
        self.LABEL_TITLE_2.setGeometry(QtCore.QRect(10, 50, 251, 131))
        self.LABEL_TITLE_2.setStyleSheet("QLabel {\n"
                                         "    font: 63 14pt \"Segoe UI Semibold\";\n"
                                         "    background-color: transparent;\n"
                                         "    color: rgb(255, 255, 255);\n"
                                         "}")
        self.LABEL_TITLE_2.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.LABEL_TITLE_2.setWordWrap(True)
        self.LABEL_TITLE_2.setObjectName("LABEL_TITLE_2")
        self.LABEL_TITLE_3 = QtWidgets.QLabel(self.FRAME_VIDEO_INFO)
        self.LABEL_TITLE_3.setGeometry(QtCore.QRect(290, 50, 251, 131))
        self.LABEL_TITLE_3.setStyleSheet("QLabel {\n"
                                         "    font: 63 14pt \"Segoe UI Semibold\";\n"
                                         "    background-color: transparent;\n"
                                         "    color: rgb(255, 255, 255);\n"
                                         "}")
        self.LABEL_TITLE_3.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.LABEL_TITLE_3.setWordWrap(True)
        self.LABEL_TITLE_3.setObjectName("LABEL_TITLE_3")
        self.LABEL_TITLE_4 = QtWidgets.QLabel(self.FRAME_VIDEO_INFO)
        self.LABEL_TITLE_4.setGeometry(QtCore.QRect(360, 10, 121, 31))
        self.LABEL_TITLE_4.setStyleSheet("QLabel {\n"
                                         "    font: 63 18pt \"Segoe UI Semibold\";\n"
                                         "    background-color: transparent;\n"
                                         "    \n"
                                         "    color: rgb(244, 244, 244);\n"
                                         "}")
        self.LABEL_TITLE_4.setAlignment(QtCore.Qt.AlignCenter)
        self.LABEL_TITLE_4.setObjectName("LABEL_TITLE_4")
        self.tabWidget.addTab(self.TAB_MAIN, "")
        self.TAB_SETTINGS = QtWidgets.QWidget()
        self.TAB_SETTINGS.setStyleSheet("QWidget {\n"
                                        "    background-color: rgb(8, 53, 88);\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton {\n"
                                        "    background-color: rgb(13, 99, 165);\n"
                                        "    color: rgb(255, 255, 255);\n"
                                        "    font: 63 18pt \"Yu Gothic UI Semibold\";\n"
                                        "    border-radius: 10%;\n"
                                        "}\n"
                                        "\n"
                                        "QPushButton:hover {\n"
                                        "    background-color: rgb(16, 129, 214);\n"
                                        "}\n"
                                        "\n"
                                        "\n"
                                        "QPushButton:pressed {\n"
                                        "    background-color: rgb(9, 74, 124);\n"
                                        "}")
        self.TAB_SETTINGS.setObjectName("TAB_SETTINGS")
        self.FRAME_SETTINGS = QtWidgets.QFrame(self.TAB_SETTINGS)
        self.FRAME_SETTINGS.setGeometry(QtCore.QRect(20, 70, 571, 351))
        self.FRAME_SETTINGS.setStyleSheet("QFrame {\n"
                                          "    border-radius: 20%;\n"
                                          "    background-color: rgb(10, 70, 116);\n"
                                          "}\n"
                                          "\n"
                                          "QCheckBox {\n"
                                          "    background-color: transparent;\n"
                                          "}\n"
                                          "\n"
                                          "QCheckBox::indicator {\n"
                                          "    width: 27px;\n"
                                          "    height: 27px;\n"
                                          "    padding-left: 5px;\n"
                                          "}\n"
                                          "\n"
                                          "\n"
                                          "QCheckBox::indicator:checked {\n"
                                          f"    image: url({load_file('icons/checkmark.png')});\n"
                                          "}\n"
                                          "\n"
                                          "QCheckBox::indicator:unchecked {\n"
                                          "    \n"
                                          f"    image: url({load_file('icons/check.png')});\n"
                                          "}\n"
                                          "\n"
                                          "QLabel {\n"
                                          "    background-color: transparent;\n"
                                          "    font: 75 14pt \"Nirmala UI\";\n"
                                          "    color: rgb(255, 255, 255);\n"
                                          "}\n"
                                          "\n"
                                          "")
        self.FRAME_SETTINGS.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.FRAME_SETTINGS.setFrameShadow(QtWidgets.QFrame.Raised)
        self.FRAME_SETTINGS.setObjectName("FRAME_SETTINGS")
        self.PUSHBUTTON_SAVE_SETTINGS = QtWidgets.QPushButton(self.FRAME_SETTINGS)
        self.PUSHBUTTON_SAVE_SETTINGS.setGeometry(QtCore.QRect(10, 300, 551, 41))
        self.PUSHBUTTON_SAVE_SETTINGS.setStyleSheet("QPushButton {\n"
                                                    "    background-color: rgb(13, 99, 165);\n"
                                                    "    color: rgb(255, 255, 255);\n"
                                                    "    font: 63 18pt \"Yu Gothic UI Semibold\";\n"
                                                    "    border-radius: 10%;\n"
                                                    "}\n"
                                                    "\n"
                                                    "QPushButton:hover {\n"
                                                    "    background-color: rgb(16, 129, 214);\n"
                                                    "}\n"
                                                    "\n"
                                                    "\n"
                                                    "QPushButton:pressed {\n"
                                                    "    background-color: rgb(9, 74, 124);\n"
                                                    "}")
        self.PUSHBUTTON_SAVE_SETTINGS.setObjectName("PUSHBUTTON_SAVE_SETTINGS")
        self.CHECKBOX_OPEN_FOLDER = QtWidgets.QCheckBox(self.FRAME_SETTINGS)
        self.CHECKBOX_OPEN_FOLDER.setGeometry(QtCore.QRect(10, 90, 41, 41))
        self.CHECKBOX_OPEN_FOLDER.setStyleSheet("")
        self.CHECKBOX_OPEN_FOLDER.setText("")
        self.CHECKBOX_OPEN_FOLDER.setObjectName("CHECKBOX_OPEN_FOLDER")
        self.CHECKBOX_MAX_RESOLUTION = QtWidgets.QCheckBox(self.FRAME_SETTINGS)
        self.CHECKBOX_MAX_RESOLUTION.setGeometry(QtCore.QRect(10, 130, 41, 41))
        self.CHECKBOX_MAX_RESOLUTION.setStyleSheet("")
        self.CHECKBOX_MAX_RESOLUTION.setText("")
        self.CHECKBOX_MAX_RESOLUTION.setObjectName("CHECKBOX_MAX_RESOLUTION")
        self.LABEL_MAX_RESOLUTION = QtWidgets.QLabel(self.FRAME_SETTINGS)
        self.LABEL_MAX_RESOLUTION.setGeometry(QtCore.QRect(50, 130, 151, 41))
        self.LABEL_MAX_RESOLUTION.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LABEL_MAX_RESOLUTION.setStyleSheet("padding-right: 7px;")
        self.LABEL_MAX_RESOLUTION.setAlignment(QtCore.Qt.AlignCenter)
        self.LABEL_MAX_RESOLUTION.setObjectName("LABEL_MAX_RESOLUTION")
        self.LABEL_OPEN_FOLDER = QtWidgets.QLabel(self.FRAME_SETTINGS)
        self.LABEL_OPEN_FOLDER.setGeometry(QtCore.QRect(50, 90, 271, 41))
        self.LABEL_OPEN_FOLDER.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LABEL_OPEN_FOLDER.setStyleSheet("padding-left: 7px;")
        self.LABEL_OPEN_FOLDER.setAlignment(QtCore.Qt.AlignCenter)
        self.LABEL_OPEN_FOLDER.setObjectName("LABEL_OPEN_FOLDER")
        self.CHECKBOX_NOTIFICATIONS = QtWidgets.QCheckBox(self.FRAME_SETTINGS)
        self.CHECKBOX_NOTIFICATIONS.setGeometry(QtCore.QRect(10, 170, 41, 41))
        self.CHECKBOX_NOTIFICATIONS.setStyleSheet("")
        self.CHECKBOX_NOTIFICATIONS.setText("")
        self.CHECKBOX_NOTIFICATIONS.setObjectName("CHECKBOX_NOTIFICATIONS")
        self.LABEL_NOTIFICATIONS = QtWidgets.QLabel(self.FRAME_SETTINGS)
        self.LABEL_NOTIFICATIONS.setGeometry(QtCore.QRect(50, 170, 131, 41))
        self.LABEL_NOTIFICATIONS.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LABEL_NOTIFICATIONS.setStyleSheet("padding-right: 5px;")
        self.LABEL_NOTIFICATIONS.setAlignment(QtCore.Qt.AlignCenter)
        self.LABEL_NOTIFICATIONS.setObjectName("LABEL_NOTIFICATIONS")
        self.CHECKBOX_SAVE_DOWNLOAD_FOLDER = QtWidgets.QCheckBox(self.FRAME_SETTINGS)
        self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setGeometry(QtCore.QRect(10, 210, 41, 41))
        self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setStyleSheet("")
        self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setText("")
        self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setObjectName("CHECKBOX_SAVE_DOWNLOAD_FOLDER")
        self.LABEL_SAVE_DOWNLOAD_FOLDER = QtWidgets.QLabel(self.FRAME_SETTINGS)
        self.LABEL_SAVE_DOWNLOAD_FOLDER.setGeometry(QtCore.QRect(50, 210, 201, 41))
        self.LABEL_SAVE_DOWNLOAD_FOLDER.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LABEL_SAVE_DOWNLOAD_FOLDER.setStyleSheet("padding-right: 10px;")
        self.LABEL_SAVE_DOWNLOAD_FOLDER.setAlignment(QtCore.Qt.AlignCenter)
        self.LABEL_SAVE_DOWNLOAD_FOLDER.setObjectName("LABEL_SAVE_DOWNLOAD_FOLDER")
        self.LABEL_CURRENT_PATH = QtWidgets.QLabel(self.FRAME_SETTINGS)
        self.LABEL_CURRENT_PATH.setGeometry(QtCore.QRect(60, 260, 501, 21))
        self.LABEL_CURRENT_PATH.setStyleSheet("color: rgb(203, 203, 203);\n"
                                              "padding-left: 2px;\n"
                                              "font: 11pt \"MS Shell Dlg 2\";\n"
                                              "background-color: rgb(8, 59, 98);\n"
                                              "border-radius: 10%;\n"
                                              "padding-bottom: 2px;")
        self.LABEL_CURRENT_PATH.setObjectName("LABEL_CURRENT_PATH")
        self.PUSHBUTTON_SET_FOLDER_PATH_SETTINGS = QtWidgets.QPushButton(self.FRAME_SETTINGS)
        self.PUSHBUTTON_SET_FOLDER_PATH_SETTINGS.setGeometry(QtCore.QRect(10, 260, 41, 21))
        self.PUSHBUTTON_SET_FOLDER_PATH_SETTINGS.setStyleSheet("QPushButton {\n"
                                                               "    background-color: rgb(8, 64, 107);\n"
                                                               "    color: rgb(255, 255, 255);\n"
                                                               "    font: 63 16pt \"Yu Gothic UI Semibold\";\n"
                                                               "    border-radius: 10%;\n"
                                                               f"    image: url({load_file('icons/folder.png')});\n"
                                                               "}\n"
                                                               "\n"
                                                               "QPushButton:hover {\n"
                                                               "    \n"
                                                               f"    image: url({load_file('icons/folder.png')});\n"
                                                               "    background-color: rgb(10, 81, 136);\n"
                                                               "}\n"
                                                               "\n"
                                                               "QPushButton:pressed {\n"
                                                               f"    image: url({load_file('icons/open-folder.png')});\n"
                                                               "    background-color: rgb(6, 49, 83);\n"
                                                               "}\n"
                                                               "\n"
                                                               "")
        self.PUSHBUTTON_SET_FOLDER_PATH_SETTINGS.setText("")
        self.PUSHBUTTON_SET_FOLDER_PATH_SETTINGS.setIconSize(QtCore.QSize(32, 32))
        self.PUSHBUTTON_SET_FOLDER_PATH_SETTINGS.setObjectName("PUSHBUTTON_SET_FOLDER_PATH_SETTINGS")
        self.CHECKBOX_CLOSE_APP = QtWidgets.QCheckBox(self.FRAME_SETTINGS)
        self.CHECKBOX_CLOSE_APP.setGeometry(QtCore.QRect(10, 50, 41, 41))
        self.CHECKBOX_CLOSE_APP.setStyleSheet("")
        self.CHECKBOX_CLOSE_APP.setText("")
        self.CHECKBOX_CLOSE_APP.setObjectName("CHECKBOX_CLOSE_APP")
        self.CHECKBOX_CREATE_SETTINGS_FILE = QtWidgets.QCheckBox(self.FRAME_SETTINGS)
        self.CHECKBOX_CREATE_SETTINGS_FILE.setGeometry(QtCore.QRect(10, 10, 41, 41))
        self.CHECKBOX_CREATE_SETTINGS_FILE.setStyleSheet("")
        self.CHECKBOX_CREATE_SETTINGS_FILE.setText("")
        self.CHECKBOX_CREATE_SETTINGS_FILE.setObjectName("CHECKBOX_CREATE_SETTINGS_FILE")
        self.LABEL_CREATE_SETTINGS_FILE = QtWidgets.QLabel(self.FRAME_SETTINGS)
        self.LABEL_CREATE_SETTINGS_FILE.setGeometry(QtCore.QRect(50, 10, 181, 41))
        self.LABEL_CREATE_SETTINGS_FILE.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LABEL_CREATE_SETTINGS_FILE.setStyleSheet("")
        self.LABEL_CREATE_SETTINGS_FILE.setAlignment(QtCore.Qt.AlignCenter)
        self.LABEL_CREATE_SETTINGS_FILE.setObjectName("LABEL_CREATE_SETTINGS_FILE")
        self.LABEL_CLOSE_APP = QtWidgets.QLabel(self.FRAME_SETTINGS)
        self.LABEL_CLOSE_APP.setGeometry(QtCore.QRect(50, 50, 261, 41))
        self.LABEL_CLOSE_APP.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LABEL_CLOSE_APP.setStyleSheet("padding-right: 5px;")
        self.LABEL_CLOSE_APP.setAlignment(QtCore.Qt.AlignCenter)
        self.LABEL_CLOSE_APP.setObjectName("LABEL_CLOSE_APP")
        self.COMBOBOX_RESOLUTIONS = QtWidgets.QComboBox(self.FRAME_SETTINGS)
        self.COMBOBOX_RESOLUTIONS.setGeometry(QtCore.QRect(200, 140, 81, 21))
        self.COMBOBOX_RESOLUTIONS.setStyleSheet("QComboBox {\n"
                                                "    border-radius: 5%;\n"
                                                "    background-color: rgb(14, 101, 168);\n"
                                                "    color: rgb(255, 255, 255);\n"
                                                "    font: 63 12pt \"Segoe UI Semibold\";\n"
                                                "}\n"
                                                "\n"
                                                "QComboBox:hover {\n"
                                                "    \n"
                                                "    background-color: rgb(15, 115, 191);\n"
                                                "}\n"
                                                "\n"
                                                "QComboBox::down-arrow {\n"
                                                f"    image: url({load_file('icons/combobox-arrow.png')});\n"
                                                "    width: 12px;\n"
                                                "    height: 12px;\n"
                                                "    margin-right: 15px;\n"
                                                "}\n"
                                                "\n"
                                                "QComboBox:drop-down {\n"
                                                "    border: 0px;\n"
                                                "}\n"
                                                "\n"
                                                "QComboBox:on {\n"
                                                "    border: 1px solid rgb(255, 255, 255);\n"
                                                "}\n"
                                                "\n"
                                                "QComboBox QListView {\n"
                                                "    border-radius: 5%;\n"
                                                "    color: rgb(255, 255, 255);\n"
                                                "    font-size: 12px;\n"
                                                "    border: 1px solid rgb(255, 255, 255);\n"
                                                "    padding: 5px;\n"
                                                "    outline: 0px;\n"
                                                "    background-color: rgb(11, 82, 136);\n"
                                                "}\n"
                                                "\n"
                                                "QComboBox QListView:item:hover {\n"
                                                "    border-radius: 5%;\n"
                                                "}")
        self.COMBOBOX_RESOLUTIONS.setObjectName("COMBOBOX_RESOLUTIONS")
        self.COMBOBOX_RESOLUTIONS.addItem("")
        self.COMBOBOX_RESOLUTIONS.addItem("")
        self.COMBOBOX_RESOLUTIONS.addItem("")
        self.COMBOBOX_RESOLUTIONS.addItem("")
        self.COMBOBOX_RESOLUTIONS.addItem("")
        self.COMBOBOX_RESOLUTIONS.addItem("")
        self.COMBOBOX_RESOLUTIONS.addItem("")
        self.COMBOBOX_RESOLUTIONS.addItem("")
        self.LABEL_LANGUAGE = QtWidgets.QLabel(self.FRAME_SETTINGS)
        self.LABEL_LANGUAGE.setGeometry(QtCore.QRect(350, 10, 101, 41))
        self.LABEL_LANGUAGE.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LABEL_LANGUAGE.setStyleSheet("padding-left: 2px;")
        self.LABEL_LANGUAGE.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.LABEL_LANGUAGE.setObjectName("LABEL_LANGUAGE")
        self.COMBOBOX_LANGUAGES = QtWidgets.QComboBox(self.FRAME_SETTINGS)
        self.COMBOBOX_LANGUAGES.setGeometry(QtCore.QRect(450, 20, 81, 21))
        self.COMBOBOX_LANGUAGES.setStyleSheet("QComboBox {\n"
                                              "    border-radius: 5%;\n"
                                              "    background-color: rgb(14, 101, 168);\n"
                                              "    color: rgb(255, 255, 255);\n"
                                              "    font: 63 12pt \"Segoe UI Semibold\";\n"
                                              "    padding-bottom: 2px;\n"
                                              "    padding-left: 4px\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox:hover {\n"
                                              "    \n"
                                              "    background-color: rgb(15, 115, 191);\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox::down-arrow {\n"
                                              f"    image: url({load_file('icons/combobox-arrow.png')});\n"
                                              "    width: 12px;\n"
                                              "    height: 12px;\n"
                                              "    margin-right: 15px;\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox:drop-down {\n"
                                              "    border: 0px;\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox:on {\n"
                                              "    border: 1px solid rgb(255, 255, 255);\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox QListView {\n"
                                              "    border-radius: 5%;\n"
                                              "    color: rgb(255, 255, 255);\n"
                                              "    font-size: 12px;\n"
                                              "    border: 1px solid rgb(255, 255, 255);\n"
                                              "    padding: 5px;\n"
                                              "    outline: 0px;\n"
                                              "    background-color: rgb(11, 82, 136);\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox QListView:item:hover {\n"
                                              "    border-radius: 5%;\n"
                                              "}")
        self.COMBOBOX_LANGUAGES.setObjectName("COMBOBOX_LANGUAGES")
        self.COMBOBOX_LANGUAGES.addItem("")
        self.COMBOBOX_LANGUAGES.addItem("")
        self.LABEL_FILE_TYPE = QtWidgets.QLabel(self.FRAME_SETTINGS)
        self.LABEL_FILE_TYPE.setGeometry(QtCore.QRect(350, 50, 101, 41))
        self.LABEL_FILE_TYPE.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.LABEL_FILE_TYPE.setStyleSheet("padding-left: 2px;")
        self.LABEL_FILE_TYPE.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.LABEL_FILE_TYPE.setObjectName("LABEL_FILE_TYPE")
        self.COMBOBOX_FILE_TYPE = QtWidgets.QComboBox(self.FRAME_SETTINGS)
        self.COMBOBOX_FILE_TYPE.setGeometry(QtCore.QRect(450, 60, 81, 21))
        self.COMBOBOX_FILE_TYPE.setStyleSheet("QComboBox {\n"
                                              "    border-radius: 5%;\n"
                                              "    background-color: rgb(14, 101, 168);\n"
                                              "    color: rgb(255, 255, 255);\n"
                                              "    font: 63 12pt \"Segoe UI Semibold\";\n"
                                              "    padding-bottom: 2px;\n"
                                              "    padding-left: 4px\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox:hover {\n"
                                              "    \n"
                                              "    background-color: rgb(15, 115, 191);\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox::down-arrow {\n"
                                              f"    image: url({load_file('icons/combobox-arrow.png')});\n"
                                              "    width: 12px;\n"
                                              "    height: 12px;\n"
                                              "    margin-right: 15px;\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox:drop-down {\n"
                                              "    border: 0px;\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox:on {\n"
                                              "    border: 1px solid rgb(255, 255, 255);\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox QListView {\n"
                                              "    border-radius: 5%;\n"
                                              "    color: rgb(255, 255, 255);\n"
                                              "    font-size: 12px;\n"
                                              "    border: 1px solid rgb(255, 255, 255);\n"
                                              "    padding: 5px;\n"
                                              "    outline: 0px;\n"
                                              "    background-color: rgb(11, 82, 136);\n"
                                              "}\n"
                                              "\n"
                                              "QComboBox QListView:item:hover {\n"
                                              "    border-radius: 5%;\n"
                                              "}")
        self.COMBOBOX_FILE_TYPE.setObjectName("COMBOBOX_FILE_TYPE")
        self.COMBOBOX_FILE_TYPE.addItem("")
        self.COMBOBOX_FILE_TYPE.addItem("")
        self.COMBOBOX_FILE_TYPE.addItem("")
        self.PUSHBUTTON_DEFAULT = QtWidgets.QPushButton(self.TAB_SETTINGS)
        self.PUSHBUTTON_DEFAULT.setGeometry(QtCore.QRect(500, 30, 91, 31))
        self.PUSHBUTTON_DEFAULT.setStyleSheet("font: 63 14pt \"Yu Gothic UI Semibold\";")
        self.PUSHBUTTON_DEFAULT.setObjectName("PUSHBUTTON_DEFAULT")
        self.PUSHBUTTON_BACK = QtWidgets.QPushButton(self.TAB_SETTINGS)
        self.PUSHBUTTON_BACK.setGeometry(QtCore.QRect(20, 30, 91, 31))
        self.PUSHBUTTON_BACK.setStyleSheet("font: 63 14pt \"Yu Gothic UI Semibold\";")
        self.PUSHBUTTON_BACK.setObjectName("PUSHBUTTON_BACK")
        self.LABEL_SETTINGS = QtWidgets.QLabel(self.TAB_SETTINGS)
        self.LABEL_SETTINGS.setGeometry(QtCore.QRect(180, 20, 241, 31))
        self.LABEL_SETTINGS.setStyleSheet("QLabel {\n"
                                          "    color: rgb(255, 255, 255);\n"
                                          "    background-color: transparent;\n"
                                          "    font: 75 20pt \"MS Shell Dlg 2\";\n"
                                          "    padding-left: 12px;\n"
                                          "}")
        self.LABEL_SETTINGS.setAlignment(QtCore.Qt.AlignCenter)
        self.LABEL_SETTINGS.setObjectName("LABEL_SETTINGS")
        self.tabWidget.addTab(self.TAB_SETTINGS, "")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        """CONNECTIONS"""

        # THREAD
        self.downloadThread = DownloadThread()
        self.searchThread = SearchThread()

        # SIGNALS _ DOWNLOAD THREAD
        self.downloadThread.progress.connect(self.update_progressbar_handler)
        self.downloadThread.str_progress.connect(self.update_download_pushbutton_text)
        self.downloadThread.finished.connect(self.download_thread_finished)

        # SIGNALS _ SEARCH THREAD
        self.searchThread.pushbutton_text.connect(self.update_search_pushbutton_text)
        self.searchThread.label2_text.connect(self.set_label2_text)
        self.searchThread.label3_text.connect(self.set_label3_text)

        # PROGRESSBAR
        self.PROGRESSBAR.setValue(0)

        # CHECKBOX
        self.CHECKBOX_MAX_RESOLUTION.clicked.connect(self.resolutions_checkbox)
        self.CHECKBOX_CREATE_SETTINGS_FILE.clicked.connect(self.create_setting_file_checkbox)

        # TABS
        self.PUSHBUTTON_SETTINGS.clicked.connect(self.settings_tab)
        self.PUSHBUTTON_BACK.clicked.connect(self.main_tab)

        # BUTTONS
        self.PUSHBUTTON_DEFAULT.clicked.connect(self.default_settings)
        self.PUSHBUTTON_SAVE_SETTINGS.clicked.connect(self.save_app_settings)
        self.PUSHBUTTON_SEARCH.clicked.connect(self.SEARCH)
        self.PUSHBUTTON_DOWNLOAD.clicked.connect(self.DOWNLOAD)
        self.PUSHBUTTON_GITHUB.clicked.connect(lambda i: webbrowser.open("https://github.com/notseriouss"))

        # FOLDERS
        self.PUSHBUTTON_SET_FOLDER_PATH_MAIN.clicked.connect(self.get_folder_to_save)
        self.PUSHBUTTON_SET_FOLDER_PATH_SETTINGS.clicked.connect(self.get_folder_to_save)

        # OTHER
        self.load_app_language()

        if CREATE_FILE is False:
            self.create_setting_file_checkbox()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.PUSHBUTTON_SEARCH.setText(_translate("MainWindow", "Search"))
        self.PUSHBUTTON_DOWNLOAD.setText(_translate("MainWindow", "Download"))
        self.LABEL_DOWNLOADER.setText(_translate("MainWindow", "Downloader"))
        self.LABEL_TITLE.setText(_translate("MainWindow", "Title"))
        self.label_.setText(_translate("MainWindow", "|\n"
                                                     "|\n"
                                                     "|\n"
                                                     "|\n"
                                                     "|"))
        self.label_2.setText(_translate("MainWindow", "|\n"
                                                      "|\n"
                                                      "|\n"
                                                      "|\n"
                                                      "|"))
        self.LABEL_TITLE_2.setText(
            _translate("MainWindow", ""))
        self.LABEL_TITLE_3.setText(_translate("MainWindow", ""))
        self.LABEL_TITLE_4.setText(_translate("MainWindow", "Size"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.TAB_MAIN), _translate("MainWindow", "Tab 1"))
        self.PUSHBUTTON_SAVE_SETTINGS.setText(_translate("MainWindow", "Save"))
        self.LABEL_MAX_RESOLUTION.setText(_translate("MainWindow", "Max resolution"))
        self.LABEL_OPEN_FOLDER.setText(_translate("MainWindow", "Open folder after downloading"))
        self.LABEL_NOTIFICATIONS.setText(_translate("MainWindow", "Notifications"))
        self.LABEL_SAVE_DOWNLOAD_FOLDER.setText(_translate("MainWindow", "Save download path"))
        self.LABEL_CURRENT_PATH.setText(_translate("MainWindow", FOLDER_TO_SAVE))
        self.LABEL_CREATE_SETTINGS_FILE.setText(_translate("MainWindow", "Create settings.json"))
        self.LABEL_CLOSE_APP.setText(_translate("MainWindow", "Close app after downloading"))
        self.COMBOBOX_RESOLUTIONS.setItemText(0, _translate("MainWindow", "2160p"))
        self.COMBOBOX_RESOLUTIONS.setItemText(1, _translate("MainWindow", "1440p"))
        self.COMBOBOX_RESOLUTIONS.setItemText(2, _translate("MainWindow", "1080p"))
        self.COMBOBOX_RESOLUTIONS.setItemText(3, _translate("MainWindow", "720p"))
        self.COMBOBOX_RESOLUTIONS.setItemText(4, _translate("MainWindow", "480p"))
        self.COMBOBOX_RESOLUTIONS.setItemText(5, _translate("MainWindow", "360p"))
        self.COMBOBOX_RESOLUTIONS.setItemText(6, _translate("MainWindow", "240p"))
        self.COMBOBOX_RESOLUTIONS.setItemText(7, _translate("MainWindow", "144p"))
        self.LABEL_LANGUAGE.setText(_translate("MainWindow", "Language: "))
        self.COMBOBOX_LANGUAGES.setItemText(0, _translate("MainWindow", "English"))
        self.COMBOBOX_LANGUAGES.setItemText(1, _translate("MainWindow", "Russian"))
        self.LABEL_FILE_TYPE.setText(_translate("MainWindow", "File type: "))
        self.COMBOBOX_FILE_TYPE.setItemText(0, _translate("MainWindow", "Auto"))
        self.COMBOBOX_FILE_TYPE.setItemText(1, _translate("MainWindow", "MP4"))
        self.COMBOBOX_FILE_TYPE.setItemText(2, _translate("MainWindow", "WEBM"))
        self.PUSHBUTTON_DEFAULT.setText(_translate("MainWindow", "Default"))
        self.PUSHBUTTON_BACK.setText(_translate("MainWindow", "Back"))
        self.LABEL_SETTINGS.setText(_translate("MainWindow", "Settings"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.TAB_SETTINGS), _translate("MainWindow", "Tab 2"))

    """FUNCS"""

    # CHECKBOX
    def create_setting_file_checkbox(self) -> None:
        global CREATE_FILE
        if self.CHECKBOX_CREATE_SETTINGS_FILE.isChecked() is False:

            # All to false
            self.CHECKBOX_CLOSE_APP.setChecked(False)
            self.CHECKBOX_MAX_RESOLUTION.setChecked(False)
            self.CHECKBOX_NOTIFICATIONS.setChecked(False)
            self.CHECKBOX_OPEN_FOLDER.setChecked(False)
            self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setChecked(False)

            # All not checkable
            self.CHECKBOX_CLOSE_APP.setCheckable(False)
            self.CHECKBOX_MAX_RESOLUTION.setCheckable(False)
            self.CHECKBOX_NOTIFICATIONS.setCheckable(False)
            self.CHECKBOX_OPEN_FOLDER.setCheckable(False)
            self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setCheckable(False)

            # All not visible
            self.CHECKBOX_CLOSE_APP.setVisible(False)
            self.CHECKBOX_MAX_RESOLUTION.setVisible(False)
            self.CHECKBOX_NOTIFICATIONS.setVisible(False)
            self.CHECKBOX_OPEN_FOLDER.setVisible(False)
            self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setVisible(False)

            CREATE_FILE = False
        else:

            # All checkable
            self.CHECKBOX_CLOSE_APP.setCheckable(True)
            self.CHECKBOX_MAX_RESOLUTION.setCheckable(True)
            self.CHECKBOX_NOTIFICATIONS.setCheckable(True)
            self.CHECKBOX_OPEN_FOLDER.setCheckable(True)
            self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setCheckable(True)

            # All visible
            self.CHECKBOX_CLOSE_APP.setVisible(True)
            self.CHECKBOX_MAX_RESOLUTION.setVisible(True)
            self.CHECKBOX_NOTIFICATIONS.setVisible(True)
            self.CHECKBOX_OPEN_FOLDER.setVisible(True)
            self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setVisible(True)

            CREATE_FILE = True

    def resolutions_checkbox(self) -> None:
        if self.CHECKBOX_MAX_RESOLUTION.isChecked() is True:
            self.COMBOBOX_RESOLUTIONS.setCurrentIndex(2)
            self.COMBOBOX_RESOLUTIONS.setVisible(False)

        else:
            self.COMBOBOX_RESOLUTIONS.setVisible(True)

    # BUTTONS

    def default_settings(self) -> None:

        self.CHECKBOX_CLOSE_APP.setCheckable(True)
        self.CHECKBOX_MAX_RESOLUTION.setCheckable(True)
        self.CHECKBOX_NOTIFICATIONS.setCheckable(True)
        self.CHECKBOX_OPEN_FOLDER.setCheckable(True)
        self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setCheckable(True)

        # All visible
        self.CHECKBOX_CLOSE_APP.setVisible(True)
        self.CHECKBOX_MAX_RESOLUTION.setVisible(True)
        self.CHECKBOX_NOTIFICATIONS.setVisible(True)
        self.CHECKBOX_OPEN_FOLDER.setVisible(True)
        self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setVisible(True)

        self.CHECKBOX_CREATE_SETTINGS_FILE.setChecked(True)
        self.CHECKBOX_OPEN_FOLDER.setChecked(True)
        self.CHECKBOX_NOTIFICATIONS.setChecked(True)
        self.CHECKBOX_MAX_RESOLUTION.setChecked(True)
        self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setChecked(False)
        self.CHECKBOX_CLOSE_APP.setChecked(False)
        self.COMBOBOX_RESOLUTIONS.setCurrentIndex(2)

    # OTHER

    def load_app_settings(self) -> None:
        LOAD_SETTINGS()

        self.CHECKBOX_CREATE_SETTINGS_FILE.setChecked(CREATE_FILE)
        self.CHECKBOX_CLOSE_APP.setChecked(CLOSE_APP)
        self.CHECKBOX_OPEN_FOLDER.setChecked(OPEN_FOLDER)
        self.CHECKBOX_NOTIFICATIONS.setChecked(NOTIFICATIONS)
        self.COMBOBOX_LANGUAGES.setCurrentIndex(LANGUAGE)
        self.COMBOBOX_FILE_TYPE.setCurrentIndex(FILE_TYPE)
        self.COMBOBOX_RESOLUTIONS.setCurrentIndex(RESOLUTION)

        if MAX_RESOLUTION is True:
            self.CHECKBOX_MAX_RESOLUTION.setChecked(MAX_RESOLUTION)
            self.COMBOBOX_RESOLUTIONS.setVisible(False)
        else:
            self.CHECKBOX_MAX_RESOLUTION.setChecked(MAX_RESOLUTION)
            self.COMBOBOX_RESOLUTIONS.setVisible(True)

        if bool(SAVE_FOLDER[0]) is True:
            self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setChecked(bool(SAVE_FOLDER[0]))
            self.LABEL_CURRENT_PATH.setText(SAVE_FOLDER[1])
        else:
            self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.setChecked(bool(SAVE_FOLDER[0]))

    def save_app_settings(self) -> None:
        global CREATE_FILE, CLOSE_APP, OPEN_FOLDER, NOTIFICATIONS, LANGUAGE, MAX_RESOLUTION, SAVE_FOLDER, RESOLUTION, FILE_TYPE
        try:
            if CREATE_FILE is True:
                if exists(SETTINGS_FILE_NAME):
                    with open("settings.json", "r+") as f:
                        settings = json.load(f)
                        settings["RESOLUTION"] = int(self.COMBOBOX_RESOLUTIONS.currentIndex())
                        settings[
                            "CREATE_FILE"] = "" if self.CHECKBOX_CREATE_SETTINGS_FILE.isChecked() is False else "True"
                        settings["CLOSE_APP"] = "" if self.CHECKBOX_CLOSE_APP.isChecked() is False else "True"
                        settings["OPEN_FOLDER"] = "" if self.CHECKBOX_OPEN_FOLDER.isChecked() is False else "True"
                        settings["MAX_RESOLUTION"] = "" if self.CHECKBOX_MAX_RESOLUTION.isChecked() is False else "True"
                        settings["NOTIFICATIONS"] = "" if self.CHECKBOX_NOTIFICATIONS.isChecked() is False else "True"
                        settings["LANGUAGE"] = int(self.COMBOBOX_LANGUAGES.currentIndex())
                        settings["FILE_TYPE"] = int(self.COMBOBOX_FILE_TYPE.currentIndex())
                        SAVE_FOLDER[0] = self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.isChecked()

                        if SAVE_FOLDER[0] is True:
                            SAVE_FOLDER[1] = FOLDER_TO_SAVE
                            settings["SAVE_FOLDER"] = ["True", FOLDER_TO_SAVE]
                        else:
                            settings["SAVE_FOLDER"] = ["", ""]
                        f.seek(0)
                        json.dump(settings, f)
                        f.truncate()
                        f.close()

                else:
                    LOAD_SETTINGS()
                    with open("settings.json", "r+") as f:
                        settings = json.load(f)
                        settings["RESOLUTION"] = int(self.COMBOBOX_RESOLUTIONS.currentIndex())
                        settings[
                            "CREATE_FILE"] = "" if self.CHECKBOX_CREATE_SETTINGS_FILE.isChecked() is False else "True"
                        settings["CLOSE_APP"] = "" if self.CHECKBOX_CLOSE_APP.isChecked() is False else "True"
                        settings["OPEN_FOLDER"] = "" if self.CHECKBOX_OPEN_FOLDER.isChecked() is False else "True"
                        settings["MAX_RESOLUTION"] = "" if self.CHECKBOX_MAX_RESOLUTION.isChecked() is False else "True"
                        settings["NOTIFICATIONS"] = "" if self.CHECKBOX_NOTIFICATIONS.isChecked() is False else "True"
                        settings["LANGUAGE"] = int(self.COMBOBOX_LANGUAGES.currentIndex())
                        settings["FILE_TYPE"] = int(self.COMBOBOX_FILE_TYPE.currentIndex())
                        SAVE_FOLDER[0] = self.CHECKBOX_SAVE_DOWNLOAD_FOLDER.isChecked()

                        if SAVE_FOLDER[0] is True:
                            SAVE_FOLDER[1] = FOLDER_TO_SAVE
                            settings["SAVE_FOLDER"] = ["True", FOLDER_TO_SAVE]
                        else:
                            settings["SAVE_FOLDER"] = ["", ""]
                        f.seek(0)
                        json.dump(settings, f)
                        f.truncate()
                        f.close()

                LOAD_SETTINGS()

                if NOTIFICATIONS is True:
                    match LANGUAGE:
                        case 0:
                            toast.show_toast(
                                "Youtube Downloader",
                                "Settings saved",
                                duration=5,
                                threaded=True,
                                icon_path=load_file("icons/youtube-downloader-icon.ico"),
                            )

                        case 1:
                            toast.show_toast(
                                "Youtube Downloader",
                                "Настройки сохранены",
                                duration=5,
                                threaded=True,
                                icon_path=load_file("icons/youtube-downloader-icon.ico"),
                            )

            else:
                LANGUAGE = self.COMBOBOX_LANGUAGES.currentIndex()
                RESOLUTION = self.COMBOBOX_RESOLUTIONS.currentIndex()
                FILE_TYPE = self.COMBOBOX_FILE_TYPE.currentIndex()

            self.load_app_language()
        except Exception as e:
            print(e)

    def load_app_language(self) -> None:
        match LANGUAGE:
            case 1:
                # PLACEHOLDER
                self.LINEEDIT_LINK.setPlaceholderText("Вставьте ссылку")

                # BUTTONS
                self.PUSHBUTTON_DEFAULT.setText("По умолчанию")
                self.PUSHBUTTON_DEFAULT.setStyleSheet("font: 63 8pt \"Yu Gothic UI Semibold\";")

                self.PUSHBUTTON_BACK.setText("Назад")
                self.PUSHBUTTON_DOWNLOAD.setText("Скачать")
                self.PUSHBUTTON_SAVE_SETTINGS.setText("Сохранить")
                self.PUSHBUTTON_SEARCH.setText("Поиск")

                # LABELS

                self.LABEL_CLOSE_APP.setText("Закрывать после установки")
                self.LABEL_CLOSE_APP.setStyleSheet("padding-right: 40px;")

                self.LABEL_CREATE_SETTINGS_FILE.setText("Создать settings.json")
                self.LABEL_CREATE_SETTINGS_FILE.setStyleSheet("padding-right: 20px;")

                self.LABEL_NOTIFICATIONS.setText("Уведомления")
                self.LABEL_NOTIFICATIONS.setStyleSheet("padding-right: 20px;")

                self.LABEL_OPEN_FOLDER.setText("Открыть папку после установки")
                self.LABEL_OPEN_FOLDER.setStyleSheet("padding-right: 20px;")

                self.LABEL_FILE_TYPE.setText("Формат: ")
                self.LABEL_LANGUAGE.setText("Язык: ")
                self.LABEL_MAX_RESOLUTION.setText("Макс. разрешение")
                self.LABEL_SAVE_DOWNLOAD_FOLDER.setText("Сохранить путь к папке")
                self.LABEL_SETTINGS.setText("Настройки")
                self.LABEL_TITLE.setText("Название")
                self.LABEL_TITLE_4.setText("Размер")

                self.FRAME_SETTINGS.setStyleSheet("QFrame {\n"
                                                  "    border-radius: 20%;\n"
                                                  "    background-color: rgb(10, 70, 116);\n"
                                                  "}\n"
                                                  "\n"
                                                  "QCheckBox {\n"
                                                  "    background-color: transparent;\n"
                                                  "}\n"
                                                  "\n"
                                                  "QCheckBox::indicator {\n"
                                                  "    width: 27px;\n"
                                                  "    height: 27px;\n"
                                                  "    padding-left: 5px;\n"
                                                  "}\n"
                                                  "\n"
                                                  "\n"
                                                  "QCheckBox::indicator:checked {\n"
                                                  f"    image: url({load_file('icons/checkmark.png')});\n"
                                                  "}\n"
                                                  "\n"
                                                  "QCheckBox::indicator:unchecked {\n"
                                                  "    \n"
                                                  f"    image: url({load_file('icons/check.png')});\n"
                                                  "}\n"
                                                  "\n"
                                                  "QLabel {\n"
                                                  "    background-color: transparent;\n"
                                                  "    font: 75 13pt \"Nirmala UI\";\n"
                                                  "    color: rgb(255, 255, 255);\n"
                                                  "}\n"
                                                  "\n"
                                                  "")

            case 0:
                # PLACEHOLDER
                self.LINEEDIT_LINK.setPlaceholderText("Insert the link")

                # BUTTONS
                self.PUSHBUTTON_DEFAULT.setText("Default")
                self.PUSHBUTTON_DEFAULT.setStyleSheet("font: 63 14pt \"Yu Gothic UI Semibold\";")

                self.PUSHBUTTON_BACK.setText("Back")
                self.PUSHBUTTON_DOWNLOAD.setText("Download")
                self.PUSHBUTTON_SAVE_SETTINGS.setText("Save")
                self.PUSHBUTTON_SEARCH.setText("Search")

                # LABELS

                self.LABEL_CLOSE_APP.setText("Close app after downloading")
                self.LABEL_CLOSE_APP.setStyleSheet("padding-right: 5px;")

                self.LABEL_CREATE_SETTINGS_FILE.setText("Create settings.json")
                self.LABEL_CREATE_SETTINGS_FILE.setStyleSheet("")

                self.LABEL_NOTIFICATIONS.setText("Notifications")
                self.LABEL_NOTIFICATIONS.setStyleSheet("padding-right: 5px;")

                self.LABEL_OPEN_FOLDER.setText("Open folder after downloading")
                self.LABEL_OPEN_FOLDER.setStyleSheet("padding-left: 7px;")

                self.LABEL_FILE_TYPE.setText("File type: ")
                self.LABEL_LANGUAGE.setText("Language: ")
                self.LABEL_MAX_RESOLUTION.setText("Max resolution")
                self.LABEL_SAVE_DOWNLOAD_FOLDER.setText("Save download path")
                self.LABEL_SETTINGS.setText("Settings")
                self.LABEL_TITLE.setText("Title")
                self.LABEL_TITLE_4.setText("Size")

                self.FRAME_SETTINGS.setStyleSheet("QFrame {\n"
                                                  "    border-radius: 20%;\n"
                                                  "    background-color: rgb(10, 70, 116);\n"
                                                  "}\n"
                                                  "\n"
                                                  "QCheckBox {\n"
                                                  "    background-color: transparent;\n"
                                                  "}\n"
                                                  "\n"
                                                  "QCheckBox::indicator {\n"
                                                  "    width: 27px;\n"
                                                  "    height: 27px;\n"
                                                  "    padding-left: 5px;\n"
                                                  "}\n"
                                                  "\n"
                                                  "\n"
                                                  "QCheckBox::indicator:checked {\n"
                                                  f"    image: url({load_file('icons/checkmark.png')});\n"
                                                  "}\n"
                                                  "\n"
                                                  "QCheckBox::indicator:unchecked {\n"
                                                  "    \n"
                                                  f"    image: url({load_file('icons/check.png')});\n"
                                                  "}\n"
                                                  "\n"
                                                  "QLabel {\n"
                                                  "    background-color: transparent;\n"
                                                  "    font: 75 14pt \"Nirmala UI\";\n"
                                                  "    color: rgb(255, 255, 255);\n"
                                                  "}\n"
                                                  "\n"
                                                  "")

    # TABS
    def settings_tab(self) -> None:
        self.tabWidget.setCurrentWidget(self.TAB_SETTINGS)
        try:
            self.load_app_settings()
        except Exception as e:
            print(e)

    def main_tab(self) -> None:
        self.tabWidget.setCurrentWidget(self.TAB_MAIN)

    # FOLDERS

    def get_folder_to_save(self) -> str:
        global FOLDER_TO_SAVE
        response = QFileDialog.getExistingDirectory(MainWindow, caption='Select a folder')
        FOLDER_TO_SAVE = response
        self.LABEL_CURRENT_PATH.setText(FOLDER_TO_SAVE)
        return response

    # YOUTUBE

    def SEARCH(self) -> None:
        global _URL, _RESOLUTION, _VIDEO_FORMAT

        self.PROGRESSBAR.setValue(0)

        if not self.LINEEDIT_LINK.text() == '':
            _URL = self.LINEEDIT_LINK.text()

            match LANGUAGE:
                case 0:
                    self.PUSHBUTTON_SEARCH.setText("Loading...")
                case 1:
                    self.PUSHBUTTON_SEARCH.setText("Загрузка...")

            if MAX_RESOLUTION is True:
                _RESOLUTION = '1080'
            else:
                _RESOLUTION = dict_res_2[RESOLUTION]
                print(_RESOLUTION)

            match FILE_TYPE:
                case 0:
                    _VIDEO_FORMAT = ('mp4', 'webm')
                case 1:
                    _VIDEO_FORMAT = 'mp4'
                case 2:
                    _VIDEO_FORMAT = 'webm'

            self.searchThread.start()

        else:
            self.LABEL_TITLE_2.setText("Link place is empty")

    def DOWNLOAD(self) -> None:
        if not self.LINEEDIT_LINK.text() == '' and _FILE_SIZE > 0:
            self.PUSHBUTTON_DOWNLOAD.setEnabled(False)
            self.PUSHBUTTON_DOWNLOAD.setStyleSheet(set_download_button_font_size(14))
            self.downloadThread.start()

    # SIGNALS
    # SEARCH TEXTS
    def update_search_pushbutton_text(self, text: str) -> None:
        self.PUSHBUTTON_SEARCH.setText(text)

    def set_label2_text(self, text: str) -> None:
        self.LABEL_TITLE_2.setText(text)

    def set_label3_text(self, text: str) -> None:
        self.LABEL_TITLE_3.setText(text)

    # HOOKS
    def update_progressbar_handler(self, value: int) -> None:
        self.PROGRESSBAR.setValue(value)

    def update_download_pushbutton_text(self, text: str) -> None:
        self.PUSHBUTTON_DOWNLOAD.setText(text)

    # DOWNLOAD THREAD

    def download_thread_finished(self) -> None:
        self.PUSHBUTTON_DOWNLOAD.setEnabled(True)
        self.PUSHBUTTON_DOWNLOAD.setStyleSheet(set_download_button_font_size(16))


def LOAD_SETTINGS() -> int:
    global CLOSE_APP, OPEN_FOLDER, MAX_RESOLUTION, NOTIFICATIONS, SAVE_FOLDER, LANGUAGE, FILE_TYPE, CREATE_FILE, RESOLUTION, FOLDER_TO_SAVE
    if not exists(SETTINGS_FILE_NAME) and CREATE_FILE is True:
        with open(SETTINGS_FILE_NAME, "w") as f:
            json.dump(DEFAULT_SETTINGS, f)
            f.close()
        with open(SETTINGS_FILE_NAME, "r") as f:
            settings = json.load(f)
            print(settings)
            CREATE_FILE = bool(settings["CREATE_FILE"])
            CLOSE_APP = bool(settings["CLOSE_APP"])
            OPEN_FOLDER = bool(settings["OPEN_FOLDER"])
            MAX_RESOLUTION = bool(settings["MAX_RESOLUTION"])
            NOTIFICATIONS = bool(settings["NOTIFICATIONS"])
            LANGUAGE = int(settings["LANGUAGE"])
            FILE_TYPE = int(settings["FILE_TYPE"])
            RESOLUTION = 0 if MAX_RESOLUTION is True else int(settings["RESOLUTION"])
            SAVE_FOLDER = list(settings["SAVE_FOLDER"])
            SAVE_FOLDER[0] = bool(SAVE_FOLDER[0])
            f.close()
        return 0

    try:
        if exists(SETTINGS_FILE_NAME):
            with open(SETTINGS_FILE_NAME, "r") as f:
                settings = json.load(f)
                CREATE_FILE = bool(settings["CREATE_FILE"])
                CLOSE_APP = bool(settings["CLOSE_APP"])
                OPEN_FOLDER = bool(settings["OPEN_FOLDER"])
                MAX_RESOLUTION = bool(settings["MAX_RESOLUTION"])
                NOTIFICATIONS = bool(settings["NOTIFICATIONS"])
                LANGUAGE = int(settings["LANGUAGE"])
                FILE_TYPE = int(settings["FILE_TYPE"])
                RESOLUTION = 0 if MAX_RESOLUTION is True else int(settings["RESOLUTION"])
                SAVE_FOLDER = list(settings["SAVE_FOLDER"])
                SAVE_FOLDER[0] = bool(SAVE_FOLDER[0])
                if SAVE_FOLDER[0] is True:
                    FOLDER_TO_SAVE = SAVE_FOLDER[1]
                f.close()
            return 0


    except Exception as e:
        print(e)
        print(f"Ошибка чтения файла настроек. Создан новый файл {SETTINGS_FILE_NAME}.")
        if CREATE_FILE is True:
            with open(SETTINGS_FILE_NAME, "w") as f:
                json.dump(DEFAULT_SETTINGS, f)
                f.close()
            with open(SETTINGS_FILE_NAME, "r") as f:
                settings = json.load(f)
                print(settings)
                CREATE_FILE = bool(settings["CREATE_FILE"])
                CLOSE_APP = bool(settings["CLOSE_APP"])
                OPEN_FOLDER = bool(settings["OPEN_FOLDER"])
                MAX_RESOLUTION = bool(settings["MAX_RESOLUTION"])
                NOTIFICATIONS = bool(settings["NOTIFICATIONS"])
                LANGUAGE = int(settings["LANGUAGE"])
                FILE_TYPE = int(settings["FILE_TYPE"])
                RESOLUTION = 0 if MAX_RESOLUTION is True else int(settings["RESOLUTION"])
                SAVE_FOLDER = list(settings["SAVE_FOLDER"])
                SAVE_FOLDER[0] = bool(SAVE_FOLDER[0])
                f.close()
            return 0
        else:
            pass
    return 1


if __name__ == "__main__":
    LOAD_SETTINGS()
    app = QtWidgets.QApplication(argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowTitle("Youtube Downloader by @notseriouss : Beta 1.0")
    MainWindow.show()
    exit(app.exec_())
